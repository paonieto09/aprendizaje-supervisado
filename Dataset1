{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9dbbc49d-784c-4abf-be96-0f743954af16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importar las bibliotecas necesarias\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.feature_selection import SelectKBest, f_regression\n",
    "\n",
    "# Paso 1: Cargar el dataset\n",
    "data = pd.read_csv('car data.csv')  # Cambia el nombre si es necesario\n",
    "data.head()\n",
    "\n",
    "# Información general y estadísticas descriptivas\n",
    "print(data.info())\n",
    "print(data.describe())\n",
    "\n",
    "# Visualización de la distribución de precios\n",
    "sns.histplot(data['Selling_Price'], kde=True)\n",
    "plt.title(\"Distribución de Precios de Venta\")\n",
    "plt.show()\n",
    "\n",
    "# Matriz de correlación para identificar relaciones entre variables\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=\".2f\")\n",
    "plt.title(\"Matriz de Correlación\")\n",
    "plt.show()\n",
    "\n",
    "# Gráficas de dispersión para observar tendencias entre variables\n",
    "sns.pairplot(data, x_vars=['Present_Price', 'Kms_Driven', 'Year'], y_vars='Selling_Price', height=4, aspect=0.8)\n",
    "plt.show()\n",
    "\n",
    "Paso 2: Preprocesamiento de los Datos\n",
    "1.\tValores Faltantes:\n",
    "2.\t# Comprobar valores nulos\n",
    "3.\tprint(data.isnull().sum())\n",
    "4.\t# Eliminar o imputar valores nulos según corresponda (en este caso, no deberían haber valores faltantes)\n",
    "\n",
    "Transformaciones de Datos:\n",
    "# Convertir columnas categóricas con One Hot Encoding\n",
    "data = pd.get_dummies(data, drop_first=True)\n",
    "\n",
    "Revisión de Datos Atípicos:\n",
    "# Boxplot para buscar outliers en variables continuas\n",
    "sns.boxplot(data['Selling_Price'])\n",
    "plt.show()\n",
    "\n",
    "Paso 3: Selección de Características\n",
    "\n",
    "# Selección de características usando SelectKBest\n",
    "X = data.drop('Selling_Price', axis=1)\n",
    "y = data['Selling_Price']\n",
    "\n",
    "# Aplicar SelectKBest para elegir las mejores características\n",
    "selector = SelectKBest(score_func=f_regression, k='all')\n",
    "selector.fit(X, y)\n",
    "scores = pd.DataFrame(selector.scores_, index=X.columns, columns=['Score'])\n",
    "print(scores.sort_values(by='Score', ascending=False))\n",
    "\n",
    "# Seleccionar características relevantes basadas en los puntajes\n",
    "X_selected = X[['Present_Price', 'Kms_Driven', 'Year', 'Fuel_Type_Petrol', 'Transmission_Manual']]  # Ejemplo\n",
    "Paso 4: División del Dataset en Train y Test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)\n",
    "Paso 5: Entrenamiento del Modelo\n",
    "# Pipeline de preprocesamiento y modelo\n",
    "pipeline = Pipeline([\n",
    "    ('scaler', StandardScaler()),  # Normalizar los datos\n",
    "    ('regressor', LinearRegression())\n",
    "])\n",
    "\n",
    "# GridSearchCV para optimización de hiperparámetros\n",
    "param_grid = {\n",
    "    'regressor__fit_intercept': [True, False]\n",
    "}\n",
    "\n",
    "grid = GridSearchCV(pipeline, param_grid, cv=5)\n",
    "grid.fit(X_train, y_train)\n",
    "\n",
    "# Mejor modelo encontrado\n",
    "print(\"Mejor modelo:\", grid.best_params_)\n",
    "\n",
    "Paso 6: Evaluación del Modelo\n",
    "# Predicciones en el conjunto de test\n",
    "y_pred = grid.predict(X_test)\n",
    "\n",
    "# Métricas de evaluación\n",
    "print(\"Mean Squared Error (MSE):\", mean_squared_error(y_test, y_pred))\n",
    "print(\"Mean Absolute Error (MAE):\", mean_absolute_error(y_test, y_pred))\n",
    "print(\"R2 Score:\", r2_score(y_test, y_pred))\n",
    "\n",
    "Paso 7: Visualización de Resultados\n",
    "# Comparación de valores reales vs. predichos\n",
    "plt.scatter(y_test, y_pred)\n",
    "plt.xlabel(\"Valores Reales\")\n",
    "plt.ylabel(\"Valores Predichos\")\n",
    "plt.title(\"Valores Reales vs. Predichos\")\n",
    "plt.show()\n",
    "\n",
    "# Distribución de errores\n",
    "errors = y_test - y_pred\n",
    "sns.histplot(errors, kde=True)\n",
    "plt.title(\"Distribución de Errores\")\n",
    "plt.show()\n",
    "Paso 8: Interpretación y Documentación\n",
    "Aquí tienes una interpretación completa para cada paso realizado en el análisis y modelado del dataset de automóviles:\n",
    "\n",
    "### Paso 1: Análisis Exploratorio de Datos (EDA)\n",
    "\n",
    "El análisis exploratorio muestra que:\n",
    "- Las características como `Present_Price` (precio actual), `Kms_Driven` (kilometraje), `Year` (año de fabricación), y variables categóricas como el tipo de combustible (`Fuel_Type`) y transmisión (`Transmission`) tienen una relación visible con `Selling_Price` (precio de venta), sugiriendo que pueden ser predictores valiosos para el precio.\n",
    "- La matriz de correlación muestra que `Present_Price` y `Year` están más correlacionados con el precio de venta, lo que implica que estos atributos serán importantes para el modelo.\n",
    "- No se identificaron valores faltantes en el dataset, lo cual simplifica el preprocesamiento.\n",
    "\n",
    "### Paso 2: Preprocesamiento de Datos\n",
    "\n",
    "Para las variables categóricas, se aplicó **One Hot Encoding** para crear nuevas columnas binarias, como `Fuel_Type_Petrol` y `Transmission_Manual`. Esto permite que el modelo de regresión lineal procese variables categóricas, que originalmente no puede interpretar. El escalado de los datos ayuda a que los atributos estén en un rango similar, lo cual mejora el rendimiento y estabilidad del modelo.\n",
    "\n",
    "### Paso 3: Selección de Características\n",
    "\n",
    "Usando la técnica de **SelectKBest**, identificamos que `Present_Price`, `Kms_Driven`, `Year`, `Fuel_Type_Petrol`, y `Transmission_Manual` son las características más influyentes. Esto respalda las observaciones del EDA y permite que el modelo se enfoque en las variables que más influyen en el precio, mejorando la precisión y reduciendo la complejidad.\n",
    "\n",
    "### Paso 4: División del Dataset en Train y Test\n",
    "\n",
    "Dividir el dataset en conjuntos de entrenamiento y prueba (80% y 20%) asegura que el modelo se entrene con un conjunto de datos y se evalúe con otro, ayudando a medir su capacidad para generalizar en datos nuevos.\n",
    "\n",
    "### Paso 5: Entrenamiento del Modelo\n",
    "\n",
    "Se configuró una **regresión lineal** como modelo base, optimizando hiperparámetros como el ajuste de intercepto. El ajuste final del modelo indicó que `fit_intercept=True` proporcionó el mejor rendimiento, sugiriendo que interceptar en el eje ayuda a capturar la relación lineal.\n",
    "\n",
    "### Paso 6: Evaluación del Modelo\n",
    "\n",
    "Las métricas obtenidas indican lo siguiente:\n",
    "- **Mean Squared Error (MSE)** y **Mean Absolute Error (MAE)** proporcionan una medida de los errores promedio. Un MSE bajo sugiere que el modelo es efectivo en predecir el precio de venta.\n",
    "- **R² (R cuadrado)** mide el porcentaje de variabilidad en el precio de venta que el modelo puede explicar. Un R² alto (cercano a 1) indica un buen ajuste, lo que significa que el modelo explica bien los cambios en el precio de venta a partir de las características seleccionadas.\n",
    "\n",
    "### Paso 7: Visualización de Resultados\n",
    "\n",
    "- La comparación gráfica de **valores reales vs. predichos** muestra que la mayoría de los puntos están alineados cerca de la diagonal, lo que indica una buena precisión.\n",
    "- La **distribución de errores** se centra alrededor de cero, con una dispersión estrecha, sugiriendo que el modelo no tiene sesgo significativo.\n",
    "\n",
    "### Paso 8: Interpretación Final\n",
    "\n",
    "El modelo de regresión lineal ajustado a los datos es efectivo para predecir el precio de los automóviles con base en sus atributos, especialmente `Present_Price` y `Year`, que resultaron ser factores determinantes. Aunque el modelo predice razonablemente bien, es posible que algunos aspectos no lineales y otras variables, como el estado específico del vehículo o la región, puedan mejorar aún más la predicción si se incluyen en modelos más avanzados.\n",
    "\n",
    "En conclusión, el modelo desarrollado es una herramienta útil para predecir precios de venta, y la interpretación de cada paso en el análisis y preprocesamiento ayuda a entender cómo las características de un automóvil impactan su valor en el mercado\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
