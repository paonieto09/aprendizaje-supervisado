{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1896bbd0-3409-438e-89ae-34bcc7f06fa6",
   "metadata": {},
   "outputs": [],
   "source": [
    "Análisis Exploratorio de Datos (EDA)\n",
    "El dataset contiene varias características físico-químicas de vinos tintos, y el objetivo es predecir la calidad del vino, que varía de 0 a 10. Durante el análisis exploratorio, puedes considerar:\n",
    "•\tVisualización de Distribuciones: Utiliza histogramas o diagramas de caja para observar la distribución de cada característica, buscando valores atípicos y la normalidad de los datos.\n",
    "•\tCorrelación entre Variables: Genera una matriz de correlación para identificar cómo cada característica se relaciona con la calidad del vino. Esto puede ayudar a identificar variables que son particularmente influyentes.\n",
    "•\tTendencias Generales: Examina cómo cambian las características en función de la calidad del vino. Por ejemplo, puedes analizar si un aumento en el ácido tartárico se asocia con un aumento en la calidad del vino.\n",
    "2. Preprocesamiento de Datos\n",
    "Antes de entrenar el modelo, es necesario limpiar y preparar los datos:\n",
    "•\tTratamiento de Valores Faltantes: Verifica si hay valores faltantes y decide si imputar esos valores o eliminar las filas/columnas.\n",
    "•\tCodificación de Variables Categóricas: Si hay variables categóricas, usa técnicas como One-Hot Encoding para convertirlas en variables numéricas.\n",
    "•\tEscalado de Características: Aunque los árboles de decisión no son sensibles a la escala, puede ser útil normalizar o estandarizar los datos si planeas comparar con otros modelos.\n",
    "3. Selección de Características\n",
    "Puedes usar técnicas de selección de características como:\n",
    "•\tImportancia de las Características: Al entrenar el árbol de decisión, observa qué características tienen la mayor importancia para la predicción de la calidad del vino.\n",
    "•\tEliminación Recursiva de Características (RFE): Esta técnica puede ayudarte a identificar y mantener las características más relevantes.\n",
    "4. Dividir el Dataset\n",
    "Divide el dataset en conjuntos de entrenamiento y prueba (por ejemplo, 80/20) para evaluar correctamente el rendimiento del modelo.\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = data.drop('quality', axis=1)  # Características\n",
    "y = data['quality']                # Variable objetivo\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "Entrenamiento del Modelo\n",
    "Entrena un árbol de decisión utilizando DecisionTreeClassifier de scikit-learn:\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Inicializar el modelo\n",
    "model = DecisionTreeClassifier(random_state=42)\n",
    "\n",
    "# Ajustar el modelo a los datos de entrenamiento\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "Evaluación del Modelo\n",
    "Evalúa el rendimiento del modelo en el conjunto de prueba usando métricas como:\n",
    "•\tExactitud (Accuracy):\n",
    "•\tPrecisión (Precision):\n",
    "•\tRecall:\n",
    "•\tF1 Score:\n",
    "•\tMatriz de Confusión:\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Predicciones\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluación\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "Visualización de Resultados\n",
    "Utiliza gráficas para visualizar el rendimiento del modelo:\n",
    "•\tMatriz de Confusión: Visualiza cómo se clasifican las diferentes clases.\n",
    "•\tGráfica de Importancia de Características: Muestra qué características son más influyentes en el modelo.\n",
    "•\tCurva ROC y AUC: Útil para evaluar la capacidad de discriminación del modelo.\n",
    "python\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Gráfica de la matriz de confusión\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
    "plt.xlabel('Predicción')\n",
    "plt.ylabel('Realidad')\n",
    "plt.title('Matriz de Confusión')\n",
    "plt.show()\n",
    "nterpretación y Documentación de Resultados\n",
    "•\tDesempeño del Modelo: Los resultados de la matriz de confusión y las métricas de clasificación deben ser analizados para determinar la efectividad del modelo. Un buen rendimiento significa que el modelo es capaz de predecir correctamente la calidad del vino en función de sus características.\n",
    "•\tImportancia de las Características: Observa qué características influyen más en la calidad del vino. Esto puede ser útil para mejorar el proceso de producción de vino.\n",
    "•\tImplicaciones Prácticas: Un modelo confiable puede ayudar a los enólogos a tomar decisiones basadas en la calidad del vino, optimizando así el proceso de producción.\n",
    "Conclusiones\n",
    "El uso de árboles de decisión en el análisis del dataset de calidad del vino proporciona un enfoque interpretable y efectivo para predecir la calidad de los vinos en función de sus atributos. Al seguir los pasos descritos, se puede obtener un modelo útil y aplicable en el ámbito de la industria vitivinícola.\n",
    "4o mini\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
